#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ALProjects.Data.DataAccessLevel.DALObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SDControl")]
	public partial class Security : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcmn_user_info(cmn_user_info instance);
    partial void Updatecmn_user_info(cmn_user_info instance);
    partial void Deletecmn_user_info(cmn_user_info instance);
    partial void Insertscr_role(scr_role instance);
    partial void Updatescr_role(scr_role instance);
    partial void Deletescr_role(scr_role instance);
    partial void Insertscr_user(scr_user instance);
    partial void Updatescr_user(scr_user instance);
    partial void Deletescr_user(scr_user instance);
    #endregion
		
		public Security() : 
				base(global::ALProjects.Data.DataAccessLevel.Properties.Settings.Default.SDControlConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Security(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Security(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Security(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Security(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<cmn_user_info> cmn_user_infos
		{
			get
			{
				return this.GetTable<cmn_user_info>();
			}
		}
		
		public System.Data.Linq.Table<scr_role> scr_roles
		{
			get
			{
				return this.GetTable<scr_role>();
			}
		}
		
		public System.Data.Linq.Table<scr_user> scr_users
		{
			get
			{
				return this.GetTable<scr_user>();
			}
		}
	}
	
	[Table(Name="dbo.cmn_user_info")]
	public partial class cmn_user_info : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _Language;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<int> _Country;
		
		private System.Nullable<int> _City;
		
		private string _Addres;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<long> _ICQ;
		
		private string _Site;
		
		private int _Role;
		
		private int _AllowedBy;
		
		private System.DateTime _RegistrationDate;
		
		private System.DateTime _LastVisit;
		
		private EntitySet<scr_user> _scr_users;
		
		private EntityRef<scr_role> _scr_role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnLanguageChanging(System.Nullable<int> value);
    partial void OnLanguageChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnCountryChanging(System.Nullable<int> value);
    partial void OnCountryChanged();
    partial void OnCityChanging(System.Nullable<int> value);
    partial void OnCityChanged();
    partial void OnAddresChanging(string value);
    partial void OnAddresChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnICQChanging(System.Nullable<long> value);
    partial void OnICQChanged();
    partial void OnSiteChanging(string value);
    partial void OnSiteChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnAllowedByChanging(int value);
    partial void OnAllowedByChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnLastVisitChanging(System.DateTime value);
    partial void OnLastVisitChanged();
    #endregion
		
		public cmn_user_info()
		{
			this._scr_users = new EntitySet<scr_user>(new Action<scr_user>(this.attach_scr_users), new Action<scr_user>(this.detach_scr_users));
			this._scr_role = default(EntityRef<scr_role>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Language", DbType="Int")]
		public System.Nullable<int> Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="Int")]
		public System.Nullable<int> Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="Int")]
		public System.Nullable<int> City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Addres", DbType="NVarChar(50)")]
		public string Addres
		{
			get
			{
				return this._Addres;
			}
			set
			{
				if ((this._Addres != value))
				{
					this.OnAddresChanging(value);
					this.SendPropertyChanging();
					this._Addres = value;
					this.SendPropertyChanged("Addres");
					this.OnAddresChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ICQ", DbType="BigInt")]
		public System.Nullable<long> ICQ
		{
			get
			{
				return this._ICQ;
			}
			set
			{
				if ((this._ICQ != value))
				{
					this.OnICQChanging(value);
					this.SendPropertyChanging();
					this._ICQ = value;
					this.SendPropertyChanged("ICQ");
					this.OnICQChanged();
				}
			}
		}
		
		[Column(Storage="_Site", DbType="NVarChar(50)")]
		public string Site
		{
			get
			{
				return this._Site;
			}
			set
			{
				if ((this._Site != value))
				{
					this.OnSiteChanging(value);
					this.SendPropertyChanging();
					this._Site = value;
					this.SendPropertyChanged("Site");
					this.OnSiteChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._scr_role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_AllowedBy", DbType="Int NOT NULL")]
		public int AllowedBy
		{
			get
			{
				return this._AllowedBy;
			}
			set
			{
				if ((this._AllowedBy != value))
				{
					this.OnAllowedByChanging(value);
					this.SendPropertyChanging();
					this._AllowedBy = value;
					this.SendPropertyChanged("AllowedBy");
					this.OnAllowedByChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastVisit", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisit
		{
			get
			{
				return this._LastVisit;
			}
			set
			{
				if ((this._LastVisit != value))
				{
					this.OnLastVisitChanging(value);
					this.SendPropertyChanging();
					this._LastVisit = value;
					this.SendPropertyChanged("LastVisit");
					this.OnLastVisitChanged();
				}
			}
		}
		
		[Association(Name="cmn_user_info_scr_user", Storage="_scr_users", OtherKey="UserId")]
		public EntitySet<scr_user> scr_users
		{
			get
			{
				return this._scr_users;
			}
			set
			{
				this._scr_users.Assign(value);
			}
		}
		
		[Association(Name="scr_role_cmn_user_info", Storage="_scr_role", ThisKey="Role", IsForeignKey=true)]
		public scr_role scr_role
		{
			get
			{
				return this._scr_role.Entity;
			}
			set
			{
				scr_role previousValue = this._scr_role.Entity;
				if (((previousValue != value) 
							|| (this._scr_role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._scr_role.Entity = null;
						previousValue.cmn_user_infos.Remove(this);
					}
					this._scr_role.Entity = value;
					if ((value != null))
					{
						value.cmn_user_infos.Add(this);
						this._Role = value.Id;
					}
					else
					{
						this._Role = default(int);
					}
					this.SendPropertyChanged("scr_role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_scr_users(scr_user entity)
		{
			this.SendPropertyChanging();
			entity.cmn_user_info = this;
		}
		
		private void detach_scr_users(scr_user entity)
		{
			this.SendPropertyChanging();
			entity.cmn_user_info = null;
		}
	}
	
	[Table(Name="dbo.scr_roles")]
	public partial class scr_role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Role;
		
		private byte _Rights;
		
		private EntitySet<cmn_user_info> _cmn_user_infos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnRightsChanging(byte value);
    partial void OnRightsChanged();
    #endregion
		
		public scr_role()
		{
			this._cmn_user_infos = new EntitySet<cmn_user_info>(new Action<cmn_user_info>(this.attach_cmn_user_infos), new Action<cmn_user_info>(this.detach_cmn_user_infos));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_Rights", DbType="TinyInt NOT NULL")]
		public byte Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				if ((this._Rights != value))
				{
					this.OnRightsChanging(value);
					this.SendPropertyChanging();
					this._Rights = value;
					this.SendPropertyChanged("Rights");
					this.OnRightsChanged();
				}
			}
		}
		
		[Association(Name="scr_role_cmn_user_info", Storage="_cmn_user_infos", OtherKey="Role")]
		public EntitySet<cmn_user_info> cmn_user_infos
		{
			get
			{
				return this._cmn_user_infos;
			}
			set
			{
				this._cmn_user_infos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cmn_user_infos(cmn_user_info entity)
		{
			this.SendPropertyChanging();
			entity.scr_role = this;
		}
		
		private void detach_cmn_user_infos(cmn_user_info entity)
		{
			this.SendPropertyChanging();
			entity.scr_role = null;
		}
	}
	
	[Table(Name="dbo.scr_users")]
	public partial class scr_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Login;
		
		private string _Password;
		
		private int _UserId;
		
		private EntityRef<cmn_user_info> _cmn_user_info;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public scr_user()
		{
			this._cmn_user_info = default(EntityRef<cmn_user_info>);
			OnCreated();
		}
		
		[Column(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._cmn_user_info.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="cmn_user_info_scr_user", Storage="_cmn_user_info", ThisKey="UserId", IsForeignKey=true)]
		public cmn_user_info cmn_user_info
		{
			get
			{
				return this._cmn_user_info.Entity;
			}
			set
			{
				cmn_user_info previousValue = this._cmn_user_info.Entity;
				if (((previousValue != value) 
							|| (this._cmn_user_info.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cmn_user_info.Entity = null;
						previousValue.scr_users.Remove(this);
					}
					this._cmn_user_info.Entity = value;
					if ((value != null))
					{
						value.scr_users.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("cmn_user_info");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
