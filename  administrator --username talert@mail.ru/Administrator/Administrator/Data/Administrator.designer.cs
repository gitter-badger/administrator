#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Administrator.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="administrator_db")]
	public partial class AdministratorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertevent(@event instance);
    partial void Updateevent(@event instance);
    partial void Deleteevent(@event instance);
    partial void Insertsetting(setting instance);
    partial void Updatesetting(setting instance);
    partial void Deletesetting(setting instance);
    partial void InsertImg(Img instance);
    partial void UpdateImg(Img instance);
    partial void DeleteImg(Img instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonOrganizationRelation(PersonOrganizationRelation instance);
    partial void UpdatePersonOrganizationRelation(PersonOrganizationRelation instance);
    partial void DeletePersonOrganizationRelation(PersonOrganizationRelation instance);
    partial void Insertservice(service instance);
    partial void Updateservice(service instance);
    partial void Deleteservice(service instance);
    partial void Insertservice_event(service_event instance);
    partial void Updateservice_event(service_event instance);
    partial void Deleteservice_event(service_event instance);
    partial void Insertservice_type(service_type instance);
    partial void Updateservice_type(service_type instance);
    partial void Deleteservice_type(service_type instance);
    partial void InsertOrganizationList(OrganizationList instance);
    partial void UpdateOrganizationList(OrganizationList instance);
    partial void DeleteOrganizationList(OrganizationList instance);
    partial void InsertBlackList(BlackList instance);
    partial void UpdateBlackList(BlackList instance);
    partial void DeleteBlackList(BlackList instance);
    partial void InsertPersonList(PersonList instance);
    partial void UpdatePersonList(PersonList instance);
    partial void DeletePersonList(PersonList instance);
    #endregion
		
		public AdministratorDataContext() : 
				base(global::Administrator.Properties.Settings.Default.administrator_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AdministratorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdministratorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdministratorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdministratorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<@event> events
		{
			get
			{
				return this.GetTable<@event>();
			}
		}
		
		public System.Data.Linq.Table<setting> settings
		{
			get
			{
				return this.GetTable<setting>();
			}
		}
		
		public System.Data.Linq.Table<Img> Imgs
		{
			get
			{
				return this.GetTable<Img>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonOrganizationRelation> PersonOrganizationRelations
		{
			get
			{
				return this.GetTable<PersonOrganizationRelation>();
			}
		}
		
		public System.Data.Linq.Table<service> services
		{
			get
			{
				return this.GetTable<service>();
			}
		}
		
		public System.Data.Linq.Table<service_event> service_events
		{
			get
			{
				return this.GetTable<service_event>();
			}
		}
		
		public System.Data.Linq.Table<service_type> service_types
		{
			get
			{
				return this.GetTable<service_type>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationList> OrganizationLists
		{
			get
			{
				return this.GetTable<OrganizationList>();
			}
		}
		
		public System.Data.Linq.Table<BlackList> BlackLists
		{
			get
			{
				return this.GetTable<BlackList>();
			}
		}
		
		public System.Data.Linq.Table<PersonList> PersonLists
		{
			get
			{
				return this.GetTable<PersonList>();
			}
		}
	}
	
	[Table(Name="dbo.event")]
	public partial class @event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _event_id;
		
		private System.Nullable<System.Guid> _contact_person_id;
		
		private System.Nullable<System.Guid> _manager_person_id;
		
		private System.Nullable<System.Guid> _organization_id;
		
		private string _name;
		
		private byte _type;
		
		private System.Nullable<int> _person_number;
		
		private string _review;
		
		private decimal _price_cash;
		
		private decimal _price_non_cash;
		
		private decimal _loss;
		
		private string _description;
		
		private System.Nullable<byte> _state;
		
		private System.DateTime _registration_date;
		
		private System.DateTime _exit_date;
		
		private EntitySet<service_event> _service_events;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Person> _person;
		
		private EntityRef<Person> _person1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(System.Guid value);
    partial void Onevent_idChanged();
    partial void Oncontact_person_idChanging(System.Nullable<System.Guid> value);
    partial void Oncontact_person_idChanged();
    partial void Onmanager_person_idChanging(System.Nullable<System.Guid> value);
    partial void Onmanager_person_idChanged();
    partial void Onorganization_idChanging(System.Nullable<System.Guid> value);
    partial void Onorganization_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    partial void Onperson_numberChanging(System.Nullable<int> value);
    partial void Onperson_numberChanged();
    partial void OnreviewChanging(string value);
    partial void OnreviewChanged();
    partial void Onprice_cashChanging(decimal value);
    partial void Onprice_cashChanged();
    partial void Onprice_non_cashChanging(decimal value);
    partial void Onprice_non_cashChanged();
    partial void OnlossChanging(decimal value);
    partial void OnlossChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstateChanging(System.Nullable<byte> value);
    partial void OnstateChanged();
    partial void Onregistration_dateChanging(System.DateTime value);
    partial void Onregistration_dateChanged();
    partial void Onexit_dateChanging(System.DateTime value);
    partial void Onexit_dateChanged();
    #endregion
		
		public @event()
		{
			this._service_events = new EntitySet<service_event>(new Action<service_event>(this.attach_service_events), new Action<service_event>(this.detach_service_events));
			this._Organization = default(EntityRef<Organization>);
			this._person = default(EntityRef<Person>);
			this._person1 = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_event_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[Column(Storage="_contact_person_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> contact_person_id
		{
			get
			{
				return this._contact_person_id;
			}
			set
			{
				if ((this._contact_person_id != value))
				{
					if (this._person1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncontact_person_idChanging(value);
					this.SendPropertyChanging();
					this._contact_person_id = value;
					this.SendPropertyChanged("contact_person_id");
					this.Oncontact_person_idChanged();
				}
			}
		}
		
		[Column(Storage="_manager_person_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> manager_person_id
		{
			get
			{
				return this._manager_person_id;
			}
			set
			{
				if ((this._manager_person_id != value))
				{
					if (this._person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmanager_person_idChanging(value);
					this.SendPropertyChanging();
					this._manager_person_id = value;
					this.SendPropertyChanged("manager_person_id");
					this.Onmanager_person_idChanged();
				}
			}
		}
		
		[Column(Storage="_organization_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> organization_id
		{
			get
			{
				return this._organization_id;
			}
			set
			{
				if ((this._organization_id != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onorganization_idChanging(value);
					this.SendPropertyChanging();
					this._organization_id = value;
					this.SendPropertyChanged("organization_id");
					this.Onorganization_idChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_person_number", DbType="Int")]
		public System.Nullable<int> person_number
		{
			get
			{
				return this._person_number;
			}
			set
			{
				if ((this._person_number != value))
				{
					this.Onperson_numberChanging(value);
					this.SendPropertyChanging();
					this._person_number = value;
					this.SendPropertyChanged("person_number");
					this.Onperson_numberChanged();
				}
			}
		}
		
		[Column(Storage="_review", DbType="NVarChar(MAX)")]
		public string review
		{
			get
			{
				return this._review;
			}
			set
			{
				if ((this._review != value))
				{
					this.OnreviewChanging(value);
					this.SendPropertyChanging();
					this._review = value;
					this.SendPropertyChanged("review");
					this.OnreviewChanged();
				}
			}
		}
		
		[Column(Storage="_price_cash", DbType="Decimal(18,0) NOT NULL")]
		public decimal price_cash
		{
			get
			{
				return this._price_cash;
			}
			set
			{
				if ((this._price_cash != value))
				{
					this.Onprice_cashChanging(value);
					this.SendPropertyChanging();
					this._price_cash = value;
					this.SendPropertyChanged("price_cash");
					this.Onprice_cashChanged();
				}
			}
		}
		
		[Column(Storage="_price_non_cash", DbType="Decimal(18,0) NOT NULL")]
		public decimal price_non_cash
		{
			get
			{
				return this._price_non_cash;
			}
			set
			{
				if ((this._price_non_cash != value))
				{
					this.Onprice_non_cashChanging(value);
					this.SendPropertyChanging();
					this._price_non_cash = value;
					this.SendPropertyChanged("price_non_cash");
					this.Onprice_non_cashChanged();
				}
			}
		}
		
		[Column(Storage="_loss", DbType="Decimal(18,0) NOT NULL")]
		public decimal loss
		{
			get
			{
				return this._loss;
			}
			set
			{
				if ((this._loss != value))
				{
					this.OnlossChanging(value);
					this.SendPropertyChanging();
					this._loss = value;
					this.SendPropertyChanged("loss");
					this.OnlossChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_state", DbType="TinyInt")]
		public System.Nullable<byte> state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[Column(Storage="_registration_date", DbType="DateTime NOT NULL")]
		public System.DateTime registration_date
		{
			get
			{
				return this._registration_date;
			}
			set
			{
				if ((this._registration_date != value))
				{
					this.Onregistration_dateChanging(value);
					this.SendPropertyChanging();
					this._registration_date = value;
					this.SendPropertyChanged("registration_date");
					this.Onregistration_dateChanged();
				}
			}
		}
		
		[Column(Storage="_exit_date", DbType="DateTime NOT NULL")]
		public System.DateTime exit_date
		{
			get
			{
				return this._exit_date;
			}
			set
			{
				if ((this._exit_date != value))
				{
					this.Onexit_dateChanging(value);
					this.SendPropertyChanging();
					this._exit_date = value;
					this.SendPropertyChanged("exit_date");
					this.Onexit_dateChanged();
				}
			}
		}
		
		[Association(Name="event_service_event", Storage="_service_events", OtherKey="event_id")]
		public EntitySet<service_event> service_events
		{
			get
			{
				return this._service_events;
			}
			set
			{
				this._service_events.Assign(value);
			}
		}
		
		[Association(Name="Organization_event", Storage="_Organization", ThisKey="organization_id", OtherKey="OrganizationID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.events.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._organization_id = value.OrganizationID;
					}
					else
					{
						this._organization_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[Association(Name="Person_event", Storage="_person", ThisKey="manager_person_id", OtherKey="PersonID", IsForeignKey=true)]
		public Person person
		{
			get
			{
				return this._person.Entity;
			}
			set
			{
				Person previousValue = this._person.Entity;
				if (((previousValue != value) 
							|| (this._person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._person.Entity = null;
						previousValue.events.Remove(this);
					}
					this._person.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._manager_person_id = value.PersonID;
					}
					else
					{
						this._manager_person_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("person");
				}
			}
		}
		
		[Association(Name="Person_event1", Storage="_person1", ThisKey="contact_person_id", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person1
		{
			get
			{
				return this._person1.Entity;
			}
			set
			{
				Person previousValue = this._person1.Entity;
				if (((previousValue != value) 
							|| (this._person1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._person1.Entity = null;
						previousValue.events1.Remove(this);
					}
					this._person1.Entity = value;
					if ((value != null))
					{
						value.events1.Add(this);
						this._contact_person_id = value.PersonID;
					}
					else
					{
						this._contact_person_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_service_events(service_event entity)
		{
			this.SendPropertyChanging();
			entity.@event = this;
		}
		
		private void detach_service_events(service_event entity)
		{
			this.SendPropertyChanging();
			entity.@event = null;
		}
	}
	
	[Table(Name="dbo.setting")]
	public partial class setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _key;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public setting()
		{
			OnCreated();
		}
		
		[Column(Name="[key]", Storage="_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.image")]
	public partial class Img : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _image_id;
		
		private System.Data.Linq.Binary _data;
		
		private string _name;
		
		private EntitySet<Person> _persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(System.Guid value);
    partial void OnImageIDChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Img()
		{
			this._persons = new EntitySet<Person>(new Action<Person>(this.attach_persons), new Action<Person>(this.detach_persons));
			OnCreated();
		}
		
		[Column(Name="image_id", Storage="_image_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ImageID
		{
			get
			{
				return this._image_id;
			}
			set
			{
				if ((this._image_id != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._image_id = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Name="data", Storage="_data", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Img_Person", Storage="_persons", ThisKey="ImageID", OtherKey="ImageID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._persons;
			}
			set
			{
				this._persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Img = this;
		}
		
		private void detach_persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Img = null;
		}
	}
	
	[Table(Name="dbo.organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrganizationID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _LegalAddress;
		
		private string _PostAddress;
		
		private string _Address;
		
		private string _Email;
		
		private string _ScopeOfActivity;
		
		private string _Phone;
		
		private System.Nullable<decimal> _Discount;
		
		private string _Description;
		
		private EntitySet<@event> _events;
		
		private EntitySet<PersonOrganizationRelation> _person_organizations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationIDChanging(System.Guid value);
    partial void OnOrganizationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLegalAddressChanging(string value);
    partial void OnLegalAddressChanged();
    partial void OnPostAddressChanging(string value);
    partial void OnPostAddressChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnScopeOfActivityChanging(string value);
    partial void OnScopeOfActivityChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Organization()
		{
			this._events = new EntitySet<@event>(new Action<@event>(this.attach_events), new Action<@event>(this.detach_events));
			this._person_organizations = new EntitySet<PersonOrganizationRelation>(new Action<PersonOrganizationRelation>(this.attach_person_organizations), new Action<PersonOrganizationRelation>(this.detach_person_organizations));
			OnCreated();
		}
		
		[Column(Name="organization_id", Storage="_OrganizationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="short_name", Storage="_ShortName", DbType="NVarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Name="legal_address", Storage="_LegalAddress", DbType="NVarChar(50)")]
		public string LegalAddress
		{
			get
			{
				return this._LegalAddress;
			}
			set
			{
				if ((this._LegalAddress != value))
				{
					this.OnLegalAddressChanging(value);
					this.SendPropertyChanging();
					this._LegalAddress = value;
					this.SendPropertyChanged("LegalAddress");
					this.OnLegalAddressChanged();
				}
			}
		}
		
		[Column(Name="post_address", Storage="_PostAddress", DbType="NVarChar(50)")]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="scope_of_activity", Storage="_ScopeOfActivity", DbType="NVarChar(50)")]
		public string ScopeOfActivity
		{
			get
			{
				return this._ScopeOfActivity;
			}
			set
			{
				if ((this._ScopeOfActivity != value))
				{
					this.OnScopeOfActivityChanging(value);
					this.SendPropertyChanging();
					this._ScopeOfActivity = value;
					this.SendPropertyChanged("ScopeOfActivity");
					this.OnScopeOfActivityChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="discount", Storage="_Discount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Organization_event", Storage="_events", ThisKey="OrganizationID", OtherKey="organization_id")]
		public EntitySet<@event> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		[Association(Name="Organization_PersonOrganizationRelation", Storage="_person_organizations", ThisKey="OrganizationID", OtherKey="OrganizationID")]
		public EntitySet<PersonOrganizationRelation> PersonOrganizationRelations
		{
			get
			{
				return this._person_organizations;
			}
			set
			{
				this._person_organizations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_person_organizations(PersonOrganizationRelation entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_person_organizations(PersonOrganizationRelation entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[Table(Name="dbo.person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _person_id;
		
		private System.Nullable<System.Guid> _image_id;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _surname;
		
		private string _phone;
		
		private string _mobile;
		
		private string _email;
		
		private string _icq;
		
		private bool _sex;
		
		private string _description;
		
		private EntitySet<@event> _events;
		
		private EntitySet<@event> _events1;
		
		private EntitySet<PersonOrganizationRelation> _person_organizations;
		
		private EntityRef<Img> _image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnImageIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIcqChanging(string value);
    partial void OnIcqChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Person()
		{
			this._events = new EntitySet<@event>(new Action<@event>(this.attach_events), new Action<@event>(this.detach_events));
			this._events1 = new EntitySet<@event>(new Action<@event>(this.attach_events1), new Action<@event>(this.detach_events1));
			this._person_organizations = new EntitySet<PersonOrganizationRelation>(new Action<PersonOrganizationRelation>(this.attach_person_organizations), new Action<PersonOrganizationRelation>(this.detach_person_organizations));
			this._image = default(EntityRef<Img>);
			OnCreated();
		}
		
		[Column(Name="person_id", Storage="_person_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonID
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Name="image_id", Storage="_image_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ImageID
		{
			get
			{
				return this._image_id;
			}
			set
			{
				if ((this._image_id != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._image_id = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Name="first_name", Storage="_first_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Name="last_name", Storage="_last_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Name="surname", Storage="_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="mobile", Storage="_mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="icq", Storage="_icq", DbType="NVarChar(20)")]
		public string Icq
		{
			get
			{
				return this._icq;
			}
			set
			{
				if ((this._icq != value))
				{
					this.OnIcqChanging(value);
					this.SendPropertyChanging();
					this._icq = value;
					this.SendPropertyChanged("Icq");
					this.OnIcqChanged();
				}
			}
		}
		
		[Column(Name="sex", Storage="_sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Person_event", Storage="_events", ThisKey="PersonID", OtherKey="manager_person_id")]
		public EntitySet<@event> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		[Association(Name="Person_event1", Storage="_events1", ThisKey="PersonID", OtherKey="contact_person_id")]
		public EntitySet<@event> events1
		{
			get
			{
				return this._events1;
			}
			set
			{
				this._events1.Assign(value);
			}
		}
		
		[Association(Name="Person_PersonOrganizationRelation", Storage="_person_organizations", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<PersonOrganizationRelation> PersonOrganizationRelations
		{
			get
			{
				return this._person_organizations;
			}
			set
			{
				this._person_organizations.Assign(value);
			}
		}
		
		[Association(Name="Img_Person", Storage="_image", ThisKey="ImageID", OtherKey="ImageID", IsForeignKey=true)]
		public Img Img
		{
			get
			{
				return this._image.Entity;
			}
			set
			{
				Img previousValue = this._image.Entity;
				if (((previousValue != value) 
							|| (this._image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._image.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._image.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._image_id = value.ImageID;
					}
					else
					{
						this._image_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Img");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.person = this;
		}
		
		private void detach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.person = null;
		}
		
		private void attach_events1(@event entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = this;
		}
		
		private void detach_events1(@event entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = null;
		}
		
		private void attach_person_organizations(PersonOrganizationRelation entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_person_organizations(PersonOrganizationRelation entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="dbo.person_organization")]
	public partial class PersonOrganizationRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.Guid> _person_id;
		
		private System.Nullable<System.Guid> _organization_id;
		
		private string _post;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Person> _person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIDChanged();
    partial void OnOrganizationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationIDChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    #endregion
		
		public PersonOrganizationRelation()
		{
			this._Organization = default(EntityRef<Organization>);
			this._person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Name="person_id", Storage="_person_id", DbType="UniqueIdentifier", IsPrimaryKey=true)]
		public System.Nullable<System.Guid> PersonID
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Name="organization_id", Storage="_organization_id", DbType="UniqueIdentifier", IsPrimaryKey=true)]
		public System.Nullable<System.Guid> OrganizationID
		{
			get
			{
				return this._organization_id;
			}
			set
			{
				if ((this._organization_id != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._organization_id = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[Column(Name="post", Storage="_post", DbType="NVarChar(50)")]
		public string Post
		{
			get
			{
				return this._post;
			}
			set
			{
				if ((this._post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Association(Name="Organization_PersonOrganizationRelation", Storage="_Organization", ThisKey="OrganizationID", OtherKey="OrganizationID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.PersonOrganizationRelations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.PersonOrganizationRelations.Add(this);
						this._organization_id = value.OrganizationID;
					}
					else
					{
						this._organization_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[Association(Name="Person_PersonOrganizationRelation", Storage="_person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._person.Entity;
			}
			set
			{
				Person previousValue = this._person.Entity;
				if (((previousValue != value) 
							|| (this._person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._person.Entity = null;
						previousValue.PersonOrganizationRelations.Remove(this);
					}
					this._person.Entity = value;
					if ((value != null))
					{
						value.PersonOrganizationRelations.Add(this);
						this._person_id = value.PersonID;
					}
					else
					{
						this._person_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.service")]
	public partial class service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _service_id;
		
		private System.Nullable<System.Guid> _service_type_id;
		
		private string _name;
		
		private EntitySet<service_event> _service_events;
		
		private EntityRef<service_type> _service_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_idChanging(System.Guid value);
    partial void Onservice_idChanged();
    partial void Onservice_type_idChanging(System.Nullable<System.Guid> value);
    partial void Onservice_type_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public service()
		{
			this._service_events = new EntitySet<service_event>(new Action<service_event>(this.attach_service_events), new Action<service_event>(this.detach_service_events));
			this._service_type = default(EntityRef<service_type>);
			OnCreated();
		}
		
		[Column(Storage="_service_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[Column(Storage="_service_type_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> service_type_id
		{
			get
			{
				return this._service_type_id;
			}
			set
			{
				if ((this._service_type_id != value))
				{
					if (this._service_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onservice_type_idChanging(value);
					this.SendPropertyChanging();
					this._service_type_id = value;
					this.SendPropertyChanged("service_type_id");
					this.Onservice_type_idChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="service_service_event", Storage="_service_events", OtherKey="service_id")]
		public EntitySet<service_event> service_events
		{
			get
			{
				return this._service_events;
			}
			set
			{
				this._service_events.Assign(value);
			}
		}
		
		[Association(Name="service_type_service", Storage="_service_type", ThisKey="service_type_id", IsForeignKey=true)]
		public service_type service_type
		{
			get
			{
				return this._service_type.Entity;
			}
			set
			{
				service_type previousValue = this._service_type.Entity;
				if (((previousValue != value) 
							|| (this._service_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._service_type.Entity = null;
						previousValue.services.Remove(this);
					}
					this._service_type.Entity = value;
					if ((value != null))
					{
						value.services.Add(this);
						this._service_type_id = value.service_type_id;
					}
					else
					{
						this._service_type_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("service_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_service_events(service_event entity)
		{
			this.SendPropertyChanging();
			entity.service = this;
		}
		
		private void detach_service_events(service_event entity)
		{
			this.SendPropertyChanging();
			entity.service = null;
		}
	}
	
	[Table(Name="dbo.service_event")]
	public partial class service_event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _service_event_id;
		
		private System.Nullable<System.Guid> _event_id;
		
		private System.Nullable<System.Guid> _service_id;
		
		private System.DateTime _start_date;
		
		private System.DateTime _end_date;
		
		private string _description;
		
		private EntityRef<@event> _event;
		
		private EntityRef<service> _service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_event_idChanging(System.Guid value);
    partial void Onservice_event_idChanged();
    partial void Onevent_idChanging(System.Nullable<System.Guid> value);
    partial void Onevent_idChanged();
    partial void Onservice_idChanging(System.Nullable<System.Guid> value);
    partial void Onservice_idChanged();
    partial void Onstart_dateChanging(System.DateTime value);
    partial void Onstart_dateChanged();
    partial void Onend_dateChanging(System.DateTime value);
    partial void Onend_dateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public service_event()
		{
			this._event = default(EntityRef<@event>);
			this._service = default(EntityRef<service>);
			OnCreated();
		}
		
		[Column(Storage="_service_event_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid service_event_id
		{
			get
			{
				return this._service_event_id;
			}
			set
			{
				if ((this._service_event_id != value))
				{
					this.Onservice_event_idChanging(value);
					this.SendPropertyChanging();
					this._service_event_id = value;
					this.SendPropertyChanged("service_event_id");
					this.Onservice_event_idChanged();
				}
			}
		}
		
		[Column(Storage="_event_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					if (this._event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[Column(Storage="_service_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					if (this._service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[Column(Storage="_start_date", DbType="DateTime NOT NULL")]
		public System.DateTime start_date
		{
			get
			{
				return this._start_date;
			}
			set
			{
				if ((this._start_date != value))
				{
					this.Onstart_dateChanging(value);
					this.SendPropertyChanging();
					this._start_date = value;
					this.SendPropertyChanged("start_date");
					this.Onstart_dateChanged();
				}
			}
		}
		
		[Column(Storage="_end_date", DbType="DateTime NOT NULL")]
		public System.DateTime end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Association(Name="event_service_event", Storage="_event", ThisKey="event_id", IsForeignKey=true)]
		public @event @event
		{
			get
			{
				return this._event.Entity;
			}
			set
			{
				@event previousValue = this._event.Entity;
				if (((previousValue != value) 
							|| (this._event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._event.Entity = null;
						previousValue.service_events.Remove(this);
					}
					this._event.Entity = value;
					if ((value != null))
					{
						value.service_events.Add(this);
						this._event_id = value.event_id;
					}
					else
					{
						this._event_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("@event");
				}
			}
		}
		
		[Association(Name="service_service_event", Storage="_service", ThisKey="service_id", IsForeignKey=true)]
		public service service
		{
			get
			{
				return this._service.Entity;
			}
			set
			{
				service previousValue = this._service.Entity;
				if (((previousValue != value) 
							|| (this._service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._service.Entity = null;
						previousValue.service_events.Remove(this);
					}
					this._service.Entity = value;
					if ((value != null))
					{
						value.service_events.Add(this);
						this._service_id = value.service_id;
					}
					else
					{
						this._service_id = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.service_type")]
	public partial class service_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _service_type_id;
		
		private string _name;
		
		private EntitySet<service> _services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_type_idChanging(System.Guid value);
    partial void Onservice_type_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public service_type()
		{
			this._services = new EntitySet<service>(new Action<service>(this.attach_services), new Action<service>(this.detach_services));
			OnCreated();
		}
		
		[Column(Storage="_service_type_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid service_type_id
		{
			get
			{
				return this._service_type_id;
			}
			set
			{
				if ((this._service_type_id != value))
				{
					this.Onservice_type_idChanging(value);
					this.SendPropertyChanging();
					this._service_type_id = value;
					this.SendPropertyChanged("service_type_id");
					this.Onservice_type_idChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="service_type_service", Storage="_services", OtherKey="service_type_id")]
		public EntitySet<service> services
		{
			get
			{
				return this._services;
			}
			set
			{
				this._services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.service_type = this;
		}
		
		private void detach_services(service entity)
		{
			this.SendPropertyChanging();
			entity.service_type = null;
		}
	}
	
	[Table(Name="dbo.vw_organization_list")]
	public partial class OrganizationList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrganizationID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _LegalAddress;
		
		private string _PostAddress;
		
		private string _Address;
		
		private string _Email;
		
		private string _ScopeOfActivity;
		
		private string _Phone;
		
		private System.Nullable<decimal> _Discount;
		
		private string _Description;
		
		private int _CanceledCount;
		
		private int _FinishedCount;
		
		private string _Director;
		
		private bool _IsInBlackList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrganizationIDChanging(System.Guid value);
    partial void OnOrganizationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLegalAddressChanging(string value);
    partial void OnLegalAddressChanged();
    partial void OnPostAddressChanging(string value);
    partial void OnPostAddressChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnScopeOfActivityChanging(string value);
    partial void OnScopeOfActivityChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDiscountChanging(System.Nullable<decimal> value);
    partial void OnDiscountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanceledCountChanging(int value);
    partial void OnCanceledCountChanged();
    partial void OnFinishedCountChanging(int value);
    partial void OnFinishedCountChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    partial void OnIsInBlackListChanging(bool value);
    partial void OnIsInBlackListChanged();
    #endregion
		
		public OrganizationList()
		{
			OnCreated();
		}
		
		[Column(Name="organization_id", Storage="_OrganizationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="NVarChar(250)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="short_name", Storage="_ShortName", DbType="NVarChar(50)", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Name="legal_address", Storage="_LegalAddress", DbType="NVarChar(250)")]
		public string LegalAddress
		{
			get
			{
				return this._LegalAddress;
			}
			set
			{
				if ((this._LegalAddress != value))
				{
					this.OnLegalAddressChanging(value);
					this.SendPropertyChanging();
					this._LegalAddress = value;
					this.SendPropertyChanged("LegalAddress");
					this.OnLegalAddressChanged();
				}
			}
		}
		
		[Column(Name="post_address", Storage="_PostAddress", DbType="NVarChar(250)")]
		public string PostAddress
		{
			get
			{
				return this._PostAddress;
			}
			set
			{
				if ((this._PostAddress != value))
				{
					this.OnPostAddressChanging(value);
					this.SendPropertyChanging();
					this._PostAddress = value;
					this.SendPropertyChanged("PostAddress");
					this.OnPostAddressChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="scope_of_activity", Storage="_ScopeOfActivity", DbType="NVarChar(250)")]
		public string ScopeOfActivity
		{
			get
			{
				return this._ScopeOfActivity;
			}
			set
			{
				if ((this._ScopeOfActivity != value))
				{
					this.OnScopeOfActivityChanging(value);
					this.SendPropertyChanging();
					this._ScopeOfActivity = value;
					this.SendPropertyChanged("ScopeOfActivity");
					this.OnScopeOfActivityChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="discount", Storage="_Discount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="canceled_count", Storage="_CanceledCount", DbType="Int")]
		public int CanceledCount
		{
			get
			{
				return this._CanceledCount;
			}
			set
			{
				if ((this._CanceledCount != value))
				{
					this.OnCanceledCountChanging(value);
					this.SendPropertyChanging();
					this._CanceledCount = value;
					this.SendPropertyChanged("CanceledCount");
					this.OnCanceledCountChanged();
				}
			}
		}
		
		[Column(Name="finished_count", Storage="_FinishedCount", DbType="Int")]
		public int FinishedCount
		{
			get
			{
				return this._FinishedCount;
			}
			set
			{
				if ((this._FinishedCount != value))
				{
					this.OnFinishedCountChanging(value);
					this.SendPropertyChanging();
					this._FinishedCount = value;
					this.SendPropertyChanged("FinishedCount");
					this.OnFinishedCountChanged();
				}
			}
		}
		
		[Column(Name="director_name", Storage="_Director", DbType="NVarChar(152)")]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[Column(Name="is_in_blacklist", Storage="_IsInBlackList", DbType="Bit")]
		public bool IsInBlackList
		{
			get
			{
				return this._IsInBlackList;
			}
			set
			{
				if ((this._IsInBlackList != value))
				{
					this.OnIsInBlackListChanging(value);
					this.SendPropertyChanging();
					this._IsInBlackList = value;
					this.SendPropertyChanged("IsInBlackList");
					this.OnIsInBlackListChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.black_list")]
	public partial class BlackList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BlackListID;
		
		private System.DateTime _Date;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlackListIDChanging(System.Guid value);
    partial void OnBlackListIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public BlackList()
		{
			OnCreated();
		}
		
		[Column(Name="black_list_id", Storage="_BlackListID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BlackListID
		{
			get
			{
				return this._BlackListID;
			}
			set
			{
				if ((this._BlackListID != value))
				{
					this.OnBlackListIDChanging(value);
					this.SendPropertyChanging();
					this._BlackListID = value;
					this.SendPropertyChanged("BlackListID");
					this.OnBlackListIDChanged();
				}
			}
		}
		
		[Column(Name="date", Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.vw_person_list")]
	public partial class PersonList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonID;
		
		private System.Nullable<System.Guid> _ImageID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Surname;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Email;
		
		private string _Icq;
		
		private bool _Sex;
		
		private string _Description;
		
		private byte[] _Photo;
		
		private System.Nullable<System.Guid> _OrganizationID;
		
		private string _Post;
		
		private string _OrganizationName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(System.Guid value);
    partial void OnPersonIDChanged();
    partial void OnImageIDChanging(System.Nullable<System.Guid> value);
    partial void OnImageIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIcqChanging(string value);
    partial void OnIcqChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(byte[] value);
    partial void OnImageChanged();
    partial void OnOrganizationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationIDChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnOrganizationNameChanging(string value);
    partial void OnOrganizationNameChanged();
    #endregion
		
		public PersonList()
		{
			OnCreated();
		}
		
		[Column(Name="person_id", Storage="_PersonID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[Column(Name="image_id", Storage="_ImageID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[Column(Name="first_name", Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Name="last_name", Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Name="surname", Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Name="phone", Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Name="mobile", Storage="_Mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[Column(Name="email", Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="icq", Storage="_Icq", DbType="NVarChar(20)")]
		public string Icq
		{
			get
			{
				return this._Icq;
			}
			set
			{
				if ((this._Icq != value))
				{
					this.OnIcqChanging(value);
					this.SendPropertyChanging();
					this._Icq = value;
					this.SendPropertyChanged("Icq");
					this.OnIcqChanged();
				}
			}
		}
		
		[Column(Name="sex", Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Name="description", Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="photo", Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Image
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Column(Name="organization_id", Storage="_OrganizationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[Column(Name="post", Storage="_Post", DbType="NVarChar(50)")]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Name="organization_name", Storage="_OrganizationName", DbType="NVarChar(250)")]
		public string OrganizationName
		{
			get
			{
				return this._OrganizationName;
			}
			set
			{
				if ((this._OrganizationName != value))
				{
					this.OnOrganizationNameChanging(value);
					this.SendPropertyChanging();
					this._OrganizationName = value;
					this.SendPropertyChanged("OrganizationName");
					this.OnOrganizationNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
